@page "/admin"
@* @layout HSBGHelper.Server.Components.Account.Shared.AccountLayout;*@


@using HSBGHelper.Server.Models;
@using HSBGHelper.Server.Services;
@using HSBGHelper.Server.Data;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Identity;

@using AntDesign.Icons;
@* @using Microsoft.VisualStudio.Web.CodeGenerators.Mvc.Templates.BlazorIdentity *@

@inject UserService userService;
@inject NavigationManager NavigationManager;
@inject UserManager<User> userManager;
@inject SignInManager<User> signInManager;
@inject ILogger<Admin> Logger;
@* @inject IdentityRedirectManager RedirectManager; *@

@* @inject HSBGDb dbContext; *@

<section>
    <header class="hero">
        <h2 class="text-3xl">Admin</h2>
    </header>
</section>

<CascadingAuthenticationState>
    <AuthorizeView>
        <NotAuthorized>
            <section id="login">
                <div class="container mx-auto max-w-96 mb-8">
                   <EditForm FormName="Login" class="p-4" Model="Input" OnValidSubmit="LoginUser" Context="LoginContext">
                        <InputText id="username" @bind-Value="Input.UserName" placeholder="Username" class="w-full" />
                        <ValidationMessage For="() => Input.UserName" class="text-red-500" />

                        <InputText id="password" type="password" @bind-Value="Input.Password" placeholder="password"
                                   class="w-full" />
                        <ValidationMessage For="() => Input.Password" class="text-red-500" />
                        <br />
                        <InputCheckbox @bind-Value="Input.RememberMe" /> Remember me 

                        <button type="submit" class="btn btn-primary w-full mt-2">Login</button>
                    </EditForm>
                </div>
            </section>
        </NotAuthorized>
        <Authorized>
            <section>
                <nav class="container mx-auto max-w-96">
                    <ul class="p-4 grid grid-cols-1 md:grid-cols-2">
                        <li>
                            <a class="btn btn-secondary mb-4" href="/admin/edit-heroes">
                                <span>Edit Heroes</span>
                                <RightOutlined />
                            </a>
                        </li>
                        <li>
                            <a class="btn btn-secondary mb-4" href="/admin/edit-trinkets">
                                <span>Edit Trinkets</span>
                                <RightOutlined />
                            </a>
                        </li>
                        <li>
                            <a class="btn btn-secondary mb-4" href="/admin/edit-minions">
                                <span>Edit Minions</span>
                                <RightOutlined />
                            </a>
                        </li>
                        <li>
                            <a class="btn btn-secondary mb-4" href="/admin/edit-spells">
                                <span>Edit Spells</span>
                                <RightOutlined />
                            </a>
                        </li>
                    </ul>
                </nav>
            </section>

        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>



<style>
    #username,
    #password {
        border-radius: 0.25rem;
        padding: 0.5rem;
        margin-bottom: 0.5rem;  
    }
</style>


@code {
    protected override async Task OnInitializedAsync()
    {
        this.Input ??= new();
        // userService = new UserService(userManager, signInManager);
        await userService.createAdmin();
    }


    public sealed class InputModel
    {
        [Required(ErrorMessage = "The UserName field is required.")]
        [DataType(DataType.Text)]
        public string UserName { get; set; }

        [Required(ErrorMessage = "The Password field is required.")]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    @* [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; } *@

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    public InputModel? Input { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; } = "/admin";
    private string loginErrorMessage { get; set; } = "";


    public async Task LoginUser()
    {
        Console.WriteLine("Attempting to login...");

        var user = await userManager.FindByNameAsync(Input.UserName);


        var result = await signInManager.PasswordSignInAsync(Input.UserName, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        Console.WriteLine("Result: " + result.IsNotAllowed);
        Console.WriteLine("Result: " + result.IsLockedOut);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            
            NavigationManager.NavigateTo("/admin");
        }
        else
        {
            loginErrorMessage = "Invalid login attempt.";
            Logger.LogWarning("Invalid login attempt.");
        }
    }
}


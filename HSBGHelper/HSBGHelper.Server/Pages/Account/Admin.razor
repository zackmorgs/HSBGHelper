@page "/admin/"

@rendermode InteractiveServer

@using HSBGHelper.Server.Models;
@using HSBGHelper.Server.Services;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Identity;
@using AntDesign.Icons;
@using Microsoft.VisualStudio.Web.CodeGenerators.Mvc.Templates.BlazorIdentity


@inject AuthProvider AuthStateProvider;
@inject NavigationManager NavigationManager;
@inject UserManager<User> _userManager;
@inject SignInManager<User> _signInManager;
@inject ILogger<Admin> Logger;
@inject IdentityRedirectManager RedirectManager;

@code {

    @* [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; } *@

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    private string loginErrorMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }


    public async Task LoginUser()
    {
        try
        {
            var result = await _signInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure:
            false);
            if (result.Succeeded)
            {
                Logger.LogInformation("User logged in.");
                RedirectManager.RedirectTo(ReturnUrl);
            }
            else if (result.RequiresTwoFactor)
            {
                RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
            }
            else if (result.IsLockedOut)
            {
                Logger.LogWarning("User account locked out.");
                RedirectManager.RedirectTo("Account/Lockout");
            }
            else
            {
                errorMessage = "Error: Invalid login attempt.";
            }
        }
        catch (Exception ex)
        {
            loginErrorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

<section>
    <header class="hero">
        <h2 class="text-3xl">Admin</h2>
    </header>
</section>

<CascadingAuthenticationState>
    <AuthorizeView>
        <NotAuthorized>
            <section>
                <div class="container mx-auto max-w-96 mb-8">
                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" class="p-4">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-red-500" role="alert" />
                        <h2 class="text-2xl mb-2">Login</h2>
                        <InputText @bind-Value="Input.Email" autocomplete="Email" aria-required="true"
                            placeholder="name@example.com" />
                        <ValidationMessage For="() => Input.Email" class="text-red-500 mt-1" />
                        <InputText id="password" type="password" @bind-Value="Input.Password"
                            autocomplete="current-password" aria-required="true" placeholder="password"
                            class="w-full" />
                        <InputCheckbox @bind-Value="Input.RememberMe" />
                        <a class="btn btn-primary" @onclick="LoginUser">
                            <span>Login</span>
                            <RightOutlined />
                        </a>
                    </EditForm>
                </div>
            </section>
        </NotAuthorized>
        <Authorized>
            <section>
                <nav class="container mx-auto max-w-96">
                    <ul class="p-4 grid grid-cols-1 md:grid-cols-2">
                        <li>
                            <a class="btn btn-secondary mb-4" href="/admin/edit-heroes">
                                <span>Edit Heroes</span>
                                <RightOutlined />
                            </a>
                        </li>
                        <li>
                            <a class="btn btn-secondary mb-4" href="/admin/edit-trinkets">
                                <span>Edit Trinkets</span>
                                <RightOutlined />
                            </a>
                        </li>
                        <li>
                            <a class="btn btn-secondary mb-4" href="/admin/edit-minions">
                                <span>Edit Minions</span>
                                <RightOutlined />
                            </a>
                        </li>
                        <li>
                            <a class="btn btn-secondary mb-4" href="/admin/edit-spells">
                                <span>Edit Spells</span>
                                <RightOutlined />
                            </a>
                        </li>
                    </ul>
                </nav>
            </section>

        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>



<style>
    #email,
    #password {
        border-radius: 0.25rem;
        padding: 0.5rem;
        margin-bottom: 0.5rem;
    }
</style>
@page "/admin/"
@inherits ComponentBase

@* @attribute [Authorize] *@

@rendermode InteractiveServer

@using HSBGHelper.Server.Models;
@using HSBGHelper.Server.Services;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Identity;
@using AntDesign.Icons;
@using Microsoft.VisualStudio.Web.CodeGenerators.Mvc.Templates.BlazorIdentity

@inject NavigationManager NavigationManager;
@inject UserManager<User> _userManager;
@inject SignInManager<User> _signInManager;
@inject ILogger<Admin> Logger;
@inject IdentityRedirectManager RedirectManager;

@code {
    private sealed class InputModel
    {
        [Required(ErrorMessage = "The Email field is required.")]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "The Password field is required.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; } = true;
    }

    @* [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; } *@

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private InputModel Input { get; set; } = new()
        {
            Email = "",
            Password = "",
            RememberMe = true
        };

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; } = "/admin";
    private string loginErrorMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
    }
    public async Task LoginUser()
    {
        Console.WriteLine("Attempting to login...");

        try
        {
            Console.WriteLine(Input.Email);
            Console.WriteLine(Input.Password);
            var result = new SignInResult();
            try {
                result = await _signInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, false);
            } catch (Exception ex) {
                Console.WriteLine(ex.ToString());
            }

            if (result.Succeeded)
            {
                Console.WriteLine("Success");
                Logger.LogInformation("User logged in.");
                NavigationManager.NavigateTo(ReturnUrl ?? "/admin");
            }
            else
            {
                Console.WriteLine("Failure");
                loginErrorMessage = "Error: Invalid login attempt.";
            }
        }
        catch (Exception ex)
        {
            loginErrorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
    }



}

<section>
    <header class="hero">
        <h2 class="text-3xl">Admin</h2>
    </header>
</section>

<CascadingAuthenticationState>
    <AuthorizeView>
        <NotAuthorized>
            <section id="login">
                <div class="container mx-auto max-w-96 mb-8">
                    <EditForm Model="Input" OnValidSubmit="LoginUser" class="p-4" Context="login">
                        <InputText id="email" @bind-Value="Input.Email" placeholder="name@example.com" class="w-full" />
                        <ValidationMessage For="() => Input.Email" class="text-red-500" />

                        <InputText id="password" type="password" @bind-Value="Input.Password" placeholder="password"
                            class="w-full" />
                        <ValidationMessage For="() => Input.Password" class="text-red-500" />
                        <br />
                        <InputCheckbox @bind-Value="Input.RememberMe" /> Remember me

                        <button type="submit" class="btn btn-primary w-full mt-2">Login</button>
                    </EditForm>
                </div>
            </section>
        </NotAuthorized>
        <Authorized>
            <section>
                <nav class="container mx-auto max-w-96">
                    <ul class="p-4 grid grid-cols-1 md:grid-cols-2">
                        <li>
                            <a class="btn btn-secondary mb-4" href="/admin/edit-heroes">
                                <span>Edit Heroes</span>
                                <RightOutlined />
                            </a>
                        </li>
                        <li>
                            <a class="btn btn-secondary mb-4" href="/admin/edit-trinkets">
                                <span>Edit Trinkets</span>
                                <RightOutlined />
                            </a>
                        </li>
                        <li>
                            <a class="btn btn-secondary mb-4" href="/admin/edit-minions">
                                <span>Edit Minions</span>
                                <RightOutlined />
                            </a>
                        </li>
                        <li>
                            <a class="btn btn-secondary mb-4" href="/admin/edit-spells">
                                <span>Edit Spells</span>
                                <RightOutlined />
                            </a>
                        </li>
                    </ul>
                </nav>
            </section>

        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>



<style>
    #email,
    #password {
        border-radius: 0.25rem;
        padding: 0.5rem;
        margin-bottom: 0.5rem;
    }
</style>


<style>
    #email,
    #password {
        border-radius: 0.25rem;
        padding: 0.5rem;
        margin-bottom: 0.5rem;
    }
</style>
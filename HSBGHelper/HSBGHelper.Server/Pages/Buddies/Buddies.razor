@page "/buddies"

@using HSBGHelper.Server.Data
@using HSBGHelper.Server.Models
@using HSBGHelper.Client.Components
@using AntDesign.Icons;

@rendermode InteractiveServer

@inject HSBGDb dbContext

<section>
    <header class="hero">
        <h3 class="text-2xl">Buddies</h3>
    </header>
</section>
<section>
    <div class="container mx-auto px-4">
        <div class="flex items-center flex-col md:flex-row justify-between">
            <ul class="control-list flex flex-row items-center justify-start w-full">
                <li @onclick="handleNameSort" class="@GetActiveClass(sortName)">
                    <span>Name</span>
                    @if (sortDesc)
                    {
                        <SortDescendingOutlined />
                    }
                    else
                    {
                        <SortAscendingOutlined/>
                    }
                </li>
                @if (selectedTier == "All") 
                {
                    <li @onclick="handleTierSort" class="@GetActiveClass(sortByTier)">
                        <span>Tier</span>
                        @if (sortDesc)
                        {
                            <SortDescendingOutlined />
                        }
                        else
                        {
                            <SortAscendingOutlined/>
                        }
                    </li>
                }
            </ul>
            <div class="flex flex-col md:flex-row items-center w-full">
                <select id="types" class="block w-full mb-4 md:mr-4 rounded" @onchange="FilterByType">
                    @foreach (var type in Types)
                    {
                        <option value="@type">@type</option>
                    }
                </select>
                <ul class="tiers flex flex-row justify-between mb-4 w-full">
                    @foreach (var tier in tiers)
                    {
                        <li class="tier @GetTierActiveClass(tier)" @onclick="() => FilterByTier(tier)">@tier</li>
                    }
                </ul>
            </div>
        </div>
    </div>
</section>
<section class="px-4">
    <div class="container mx-auto">
        <ul id="buddies"
            class="mb-4 @(filteredBuddies.Count()==0 ? ("flex items-center justify-center") : ("mb-4 grid grid-cols-3 md:grid-cols-4 lg:grid-cols-5"))">
            @foreach (var buddy in filteredBuddies)
            {
                @if (buddy.Image != null && buddy.Name != "Not Listed")
                {
                    <BuddyCard Name="@buddy.Name" Image="@buddy.Image" Id="@buddy.Id" />
                }

            }
            @if (filteredBuddies.Count() == 0)
            {
                <h2 class="text-2xl py-4">
                    No Buddies Found
                </h2>
            }
        </ul>
    </div>
</section>
@if (shouldPaginate == true)
{
    <div class="container mx-auto">
        <div class="p-4 flex items-center justify-center">
            <a class="btn btn-primary mx-auto" @onclick="() => { shouldPaginate=false;  OnInitialized(); }">
                <span>Load More</span>
                <ArrowDownOutlined />
            </a>
        </div>
    </div>
}

@code {
    private bool shouldPaginate = true;
    private bool sortDesc = false;
    private bool sortName = true;
    private bool sortByType = false;
    private bool sortByTier = true;
    private List<Buddy> buddies { get; set; } = new List<Buddy>();
    private List<Buddy> filteredBuddies { get; set; } = new List<Buddy>();
    private List<String> Types = new List<String> { "All", "Beast", "Demon", "Dragon", "Elemental", "Mech", "Murloc",
"Naga", "Pirate", "Quilboar", "Undead", "Neutral" };
    private List<String> tiers = new List<string> { "All", "1", "2", "3", "4", "5", "6" };
    private String selectedType = "All";
    private String selectedTier = "All";

    protected override void OnInitialized()
    {
        buddies = dbContext.Buddies.ToList();
        filteredBuddies = buddies;
        handleNameSort();
    }

    private void handleNameSort()
    {
        sortName = true;
        sortByType = false;
        sortByTier = false;
        sortDesc = !sortDesc;

        FilterBuddies();
    }

    private void handleTierSort()
    {
        sortName = false;
        sortByType = false;
        sortByTier = true;
        sortDesc = !sortDesc;

        FilterBuddies();
    }

    private void FilterByType(ChangeEventArgs e)
    {
        selectedType = e.Value.ToString();
        FilterBuddies();
    }

    private void FilterByTier(string tier)
    {
        selectedTier = tier;
        FilterBuddies();
    }

    private void FilterBuddies()
    {
        filteredBuddies = buddies;

        if (selectedType != "All")
        {
            filteredBuddies = filteredBuddies.Where(b => b.Type.Contains(selectedType)).ToList();
        }

        if (selectedTier != "All")
        {
            filteredBuddies = filteredBuddies.Where(b => b.Tier.ToString() == selectedTier).ToList();
        }

        if (sortDesc)
        {
            if (sortByTier)
            {
                filteredBuddies = filteredBuddies.OrderBy(b => b.Tier).ToList();
            }
            else if (sortByType)
            {
                filteredBuddies = filteredBuddies.OrderBy(b => b.Type).ToList();
            }
            else if (sortName)
            {
                filteredBuddies = filteredBuddies.OrderBy(b => b.Name).ToList();
            }
        }
        else
        {
            if (sortByTier)
            {
                filteredBuddies = filteredBuddies.OrderByDescending(b => b.Tier).ToList();
            }
            else if (sortByType)
            {
                filteredBuddies = filteredBuddies.OrderByDescending(b => b.Type).ToList();
            }
            else if (sortName)
            {
                filteredBuddies = filteredBuddies.OrderByDescending(b => b.Name).ToList();
            }
        }

        if (shouldPaginate)
        {
            filteredBuddies = filteredBuddies.Take(10).ToList();
        }
    }

    private string GetActiveClass(bool isSelected)
    {
        return isSelected ? "active" : string.Empty;
    }

    private string GetTierActiveClass(string tier)
    {
        return selectedTier == tier ? "selected" : string.Empty;
    }
}

<style>
    #buddies {
        border-radius: 0.5rem;
        box-shadow: inset 1px 4px 7px #00000029;
        padding: 0.25rem;
        background-color: #ffffff47;
    }

    #controls {
        border-radius: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .control-list li:active {
        transform: scale(1.05);
    }

    .control-list li.active {
        background: linear-gradient(315deg, #232323, #0e0e0e);
        color: white;
    }

    .control-list {
        margin-bottom: 0.5rem;
    }

    .control-list li {
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 0.5rem;
        background-color: #ffffff47;
        margin-right: 0.5rem;

        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: background-color 0.3s ease, transform 0.3s ease;
    }

    #types {
        padding: 0.25rem;
        border-radius: 0.25rem;
    }

    .tier {
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 50%;
        transition: background-color 0.3s;
        width: 2.5rem;
        height: 2.5rem;
        text-align: center;
    }

    .tier.selected {
        color: white;
        background-color: #b90a0a;
        text-shadow: 0px 0px 10px #ffffff9c;
        box-shadow: 0px 0px 10px #ffffff9c;
    }

    .buddy-img {
        transition: transform 0.3s ease;
    }

    .buddy-img:hover {
        cursor: pointer;
        transform: scale(1.1);
    }

    .buddy-img {
        filter: drop-shadow(rgba(0, 0, 0, 0.6) 0px 3px 3px);
    }

    .buddy-img:hover {}
</style>
